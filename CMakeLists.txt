project(cppKin CXX)
cmake_minimum_required(VERSION 3.0)

set (CMAKE_CXX_STANDARD 14)
set (CMAKE_CXX_STANDARD_REQUIRED ON)
set (CMAKE_COLOR_MAKEFILE ON)
set (CMAKE_CXX_EXTENSIONS OFF)

if(NOT WIN32)
    string(ASCII 27 Esc)
    set(ColourReset "${Esc}[m")
    set(Red "${Esc}[31m")
    set(Green "${Esc}[32m")
else()
    set(ColourReset "")
    set(Red "")
    set(Green "")
endif()

if (NOT CMAKE_BUILD_TYPE)
    message(STATUS "Default build type 'Debug'")
    set(CMAKE_BUILD_TYPE Debug CACHE STRING "" FORCE )
endif()

if(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
    set(CMAKE_DEBUG_POSTFIX d)
endif()
option(3RD_PARTY_INSTALL_STEP "3rd party install step" OFF)
option(PRE_COMPILE_STEP "Pre compile step" OFF)
option(COMPILATION_STEP "Compile step" OFF)
option(WITH_THRIFT "Thrift transportation is supported" OFF)
option(WITH_TESTS "with tests" OFF)
option(WITH_EXAMPLES "with examples" OFF)

set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)
set(PROJECT_DIR ${CMAKE_CURRENT_SOURCE_DIR})
if(NOT PROJECT_3RD_LOC)
    set(PROJECT_3RD_LOC ${PROJECT_SOURCE_DIR}/Third_Party)
endif()
if(NOT IS_ABSOLUTE ${PROJECT_3RD_LOC})
    get_filename_component(PROJECT_3RD_LOC ${PROJECT_3RD_LOC} ABSOLUTE BASE_DIR ${PROJECT_SOURCE_DIR})
endif()
string(FIND "${CMAKE_PREFIX_PATH}" "${PROJEC_3RD_LOC}" 3RD_LOC_PREFIX_ADDED)
if(NOT ${3RD_LOC_PREFIX_ADDED})
    list(APPEND CMAKE_PREFIX_PATH ${PROJECT_3RD_LOC})
endif()

if(3RD_PARTY_INSTALL_STEP)
    message(STATUS "checking if thrift supported - ${WITH_THRIFT}")
    message(STATUS "third party installation path - ${PROJECT_3RD_LOC}")
    message(STATUS "python binding lib - ${PYTHON_BINDING}")
    find_package(SpdLog)
    if(WITH_THRIFT)
        find_package(Thrift)
    endif()
    find_package(Boost_Pack)
    find_package(CURL)
    find_package(Core)
    find_package(RapidJson)
    if(UNIX AND NOT APPLE)
        find_package(Python)
        if(${PYTHON_BINDING} STREQUAL "sweetPy")
            find_package(SweetPy)
        elseif(${PYTHON_BINDING} STREQUAL "pyBind")
            find_package(PyBind)
        else()
            message(FATAL_ERROR "invalid binding library - ${PYTHON_BINDING}")
        endif()

        if(WITH_TESTS)
            find_package(Bottle)
            find_package(BenchMark)
        endif()
    endif()
    include(installThirdParty)
endif()

include_directories(${PROJECT_DIR} ${PYTHON_INCLUDE_DIRS} ${PROJECT_DIR}/src ${PROJECT_3RD_LOC}/include)
link_directories(${PROJECT_3RD_LOC}/lib ${OUTPUT_DIR})

if(PRE_COMPILE_STEP AND WITH_THRIFT)
    if (WIN32)
        include(cppkinMacro)
        LinuxPath_ToWinPath(${PROJECT_DIR} WIN_PROJECT_DIR)
        LinuxPath_ToWinPath(${PROJECT_3RD_LOC} WIN_PROJECT_3RD_LOC)
        add_custom_target(THRIFT_BUILD ALL COMMAND ${WIN_PROJECT_DIR}\\IDL\\GenerateZipkin.bat ${WIN_PROJECT_DIR} ${WIN_PROJECT_3RD_LOC})
        add_custom_command(TARGET THRIFT_BUILD POST_BUILD COMMAND copy ${WIN_PROJECT_DIR}\\Third_party\\Patch\\zipkinCore_constants.h ${WIN_PROJECT_DIR}\\GeneratedFiles COMMAND copy ${WIN_PROJECT_DIR}\\Third_party\\Patch\\zipkinCore_constants.cpp ${WIN_PROJECT_DIR}\\GeneratedFiles)
    else()
        add_custom_target(THRIFT_BUILD ALL COMMAND ${PROJECT_DIR}/IDL/GenerateZipkin.bash ${PROJECT_DIR} ${PROJECT_3RD_LOC})
    endif()
endif()

if(COMPILATION_STEP)
    message(STATUS "checking if tests supported - ${WITH_TESTS}")
    message(STATUS "checking if examples supported - ${WITH_EXAMPLES}")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DRAPID_JSON_FOUND")
    set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
    set(PROJECT_DIR ${CMAKE_CURRENT_SOURCE_DIR})
    if(NOT OUTPUT_DIR)
        set(OUTPUT_DIR ${PROJECT_DIR})
    endif()
    if(NOT IS_ABSOLUTE ${OUTPUT_DIR})
        get_filename_component(OUTPUT_DIR ${OUTPUT_DIR} ABSOLUTE BASE_DIR ${PROJECT_SOURCE_DIR})
    endif()
    message(STATUS "Output dir - ${OUTPUT_DIR}")

    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_DIR}/lib)
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY  ${PROJECT_DIR}/bin)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY  ${PROJECT_DIR}/bin)
    set(CMAKE_BINARY_DIR ${PROJECT_DIR}/bin)
    set(EXECUTABLE_OUTPUT_PATH ${PROJECT_DIR}/bin)
    add_definitions(-DCPPKIN_DLL)

    if(WIN32)
        add_definitions(-DCURL_STATICLIB)
        set(TO_LINK_LIBS libcurl Core${CMAKE_DEBUG_POSTFIX}.dll Ws2_32)
    else()
        set(TO_LINK_LIBS pthread curl libCore${CMAKE_DEBUG_POSTFIX}.so)
    endif()

    add_library(cppkin SHARED src/Trace.h src/SpanContainer.h src/SpanContainer.cpp src/span_impl.cpp src/span_impl.h src/AnnotationType.cpp src/AnnotationType.h src/Annotation.h src/SimpleAnnotation.cpp src/SimpleAnnotation.h src/cppkin.h src/Trace.cpp src/Encoder.cpp src/Encoder.h src/EncodingTypes.cpp src/EncodingTypes.h src/EncodingContext.cpp src/EncodingContext.h src/TransportManager.cpp src/TransportManager.h src/Transport.cpp src/Transport.h src/HttpTransport.cpp src/HttpTransport.h src/ConfigTags.h src/TransportType.cpp src/TransportType.h src/TransportFactory.h src/TransportFactory.cpp src/ConfigParams.cpp src/ConfigTags.cpp src/Annotation.cpp src/Sampler.cpp src/JsonEncoder.h src/cppkin.cpp src/Export.h src/Span.cpp src/Span.h src/BinaryAnnotation.cpp)
    set_target_properties(cppkin PROPERTIES PUBLIC_HEADER "src/Trace.h;src/Annotation.h;src/cppkin.h;src/Span.h")

    if(WITH_THRIFT)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DTHRIFT_FOUND")
        target_sources(cppkin PRIVATE src/ScribeTransport.cpp src/ScribeTransport.cpp src/ScribeTransport.h GeneratedFiles/scribe.cpp GeneratedFiles/Scribe_constants.cpp GeneratedFiles/Scribe_types.cpp GeneratedFiles/zipkinCore_constants.cpp GeneratedFiles/zipkinCore_types.cpp src/ThriftEncoder.h)
        if(WIN32)
            set(TO_LINK_LIBS "${TO_LINK_LIBS};thriftmd${CMAKE_DEBUG_POSTFIX}")
        else()
            set(TO_LINK_LIBS "${TO_LINK_LIBS};thrift")
        endif()
    endif()

    if(${SPDLOG_FOUND})
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DSPDLOG_FOUND")
    endif()
    target_link_libraries(cppkin ${TO_LINK_LIBS})

    if(WITH_EXAMPLES)
        remove_definitions(-DCPPKIN_DLL)
        add_subdirectory(${PROJECT_DIR}/examples)
    endif()
    if(UNIX AND NOT APPLE AND WITH_TESTS)
        add_subdirectory(bench)
        add_subdirectory(python)
    endif()
    install(TARGETS cppkin
            PUBLIC_HEADER DESTINATION ${OUTPUT_DIR}/include
            LIBRARY DESTINATION ${OUTPUT_DIR}/lib
            )
endif()

if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Werror -pedantic -Wno-sign-compare -Wno-unused-variable")
endif()
